demo()
installed.packages()
installed.packages()[,1:2]
installed.packages()[,1:1]
installed.packages()[,1]
old.packages()
update.packages(ask=FALSE)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("Rtoola")
install.packages("Rtools")
install.packages("rtools4")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("swirl")
library("swirl")
swirl()
5 + 5
skip()
skip()
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
c
info()
?c
z
(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10 )
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
swirl()
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?.dir()
?.list.files()
?dir
args(list.files)
old.dir <- getcwd()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.dirs()
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R") ---
file.rename("mytest.R", "mytest2.R")
file.info("mytest.R")$mode ---
fd
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
ls()
dir()
file.path("mytest.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(dir.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`"`
?`:`
seq(1,20)
1:20
seq(0,10,by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
seq(1, length(my_seq))
1:length(my_seq)
seq(along.with = my_seq)
seq_along
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep( c(0,1,2), each=10)
ls()
class(plants)
f
skip()
swirl()
data()
data = women
women$height
women$weight
women
?pairs
pairs(~height+~weight,data=women)
uspop
us<-uspop
trees
pairs(~Girth+Volume+Height,data=trees)
isTall <- ifelse(trees$Height > 20, "red", "grey")
pairs(~Girth+Volume+Height,data=trees, col=isTall)
isTall <- ifelse(trees$Height > 50, "red", "grey")
pairs(~Girth+Volume+Height,data=trees, col=isTall)
isTall <- ifelse(trees$Height > 80, "red", "grey")
pairs(~Girth+Volume+Height,data=trees, col=isTall)
?paracord
?:paracord
paracord
paracord()
?paracord()
help(paracord)
help("paracord")
help("paracoord")
help(paracoord)
?paracoord
?:paracoord
View(plants)
plants
paracoord(trees,[c("Girth"), "Volume", "Height"]),var.Label = TRUE)
paracoord(trees,[c("Girth", "Volume", "Height"]),var.Label = TRUE)
paracoord(trees,[c("Girth", "Volume", "Height")},var.Label = TRUE)
library(MASS)
paracoord(trees,[c("Girth", "Volume", "Height")],var.Label = TRUE)
paracoord(trees[,c("Girth", "Volume", "Height")],var.Label = TRUE)
paracoord(trees[,c("Girth", "Volume", "Height")],var.Label = TRUE)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr',` 'IRdisplay', 'pbdZMQ', 'devtools'))
``
my_frame %>% summarize(rates2 = mean(rates))
names(plants)
fruits <- v("a", "b")
iris %>%
slice_sample(n = 50) %>%
ggplot()  +
geom_label( aes (Sepal.Length, Petal.Length,
label = paste(Sepal.Length,",", Petal.Length) ) )
iris
slice_sample(n = 50) %>%
ggplot() +geom_label( aes (Sepal.Length, Petal.Length, label = paste(Sepal.Length,",", Petal.Length) ) )
ggplot() +geom_label( aes (Sepal.Length, Petal.Length, label = paste(Sepal.Length,",", Petal.Length) ) )
library(ggplot)
library(ggplot2)
ggplot() +geom_label( aes (Sepal.Length, Petal.Length, label = paste(Sepal.Length,",", Petal.Length) ) )
ggplot(data=iris) +geom_label( aes (Sepal.Length, Petal.Length, label = paste(Sepal.Length,",", Petal.Length) ) )
summary(iris$Petal.Length)
summary(mean(iris$Petal.Length))
mean(iris$Petal.Length)
summarize(mean(iris$Petal.Length))
cars
cars %>% ggplot() + geom_point(aes(x=speed, y=dist))
ggplot() + geom_point(aes(x=speed, y=dist))
ggplot(data=cars) + geom_point(aes(x=speed, y=dist))
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
cars %>% ggplot() + geom_point(aes(x=speed, y=dist))
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
cars %>% ggplot() + geom_point(aes(x=speed, y=dist))
library(ggplot2)
cars %>% ggplot() + geom_point(aes(x=speed, y=dist))
votes
ggplot(data = cars) %>% geom_point(aes (x = speed, y = dist))
state <- c("CA", "CA, "NY", "NY"")
state <- c("CA", "CA, "NY", "NY)
state <- c("CA", "CA, "NY", "NY")
state <- c("CA", "CA", "NY", "NY")
candidate <- c("Trump", "Clinton", "Trump", "Clinton")
votes <- c(843, 718, 845, 49)
df <- data.frame(state, candidate, votes)
df
votes = votes %>% group_by(state) %>% mutate(a=sum(votes), b=votes/a)
votes = filter(votes, candidate != "Clinton")
library(plyr)
library(plyr); library(dplyr)
votes = votes %>% group_by(state) %>% mutate(a=sum(votes), b=votes/a)
votes = filter(votes, candidate != "Clinton")
library(purrr)
votes = filter(votes, candidate != "Clinton")
votes = select(votes, state, b)
votes = votes %>% group_by(state) %>% mutate(a=sum(votes), b=votes/a)
votes
df
votes = votes %>% group_by(state) %>% mutate(a=sum(votes), b=votes/a)
str(df)
votes = votes %>% group_by(state)
votes = group_by(state)
votes = votes %>%group_by(state)
votes = votes%>%group_by(state)
votes%>%group_by(state)
votes = votes %>% group_by(candidate)
group_by(candidate)
group_by(df$candidate)
plants
plants %>% group_by(Scientific_Name)
df
df %>% group_by(state)
votes <- df
votes = votes %>% group_by(state) %>% mutate(a=sum(votes), b=votes/a)
votes
votes = filter(votes, candidate != "Clinton")
votes
votes = select(votes, state, b)
votes
votes %>% spread(key="state", value="b")
library(tityr)
library(tidyr)
library(tidyselect)
votes %>% spread(key="state", value="b")
library(tidyverse)
install.packages("tidyverse")
votes %>% spread(key="state", value="b")
library(tidyverse)
votes %>% spread(key="state", value="b")
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
shiny::runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp()
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
shiny::runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/Subway/subway')
runApp('C:/Users/Krishnan CS/evlWeatherForR')
runApp('C:/Users/Krishnan CS/evlWeatherForR')
runApp('C:/Users/Krishnan CS/evlWeatherForR')
runApp('C:/Users/Krishnan CS/Subway/subway')
shiny::runApp('C:/Users/Krishnan CS/Subway/subway')
shiny::runApp('C:/Users/Krishnan CS/Subway/subway')
